1. npm init - to create package.json
    or do npm init -y
----
2. create app.js as main entry file
-----
3. npm i express or npm install express
    version: 4.19.2(4 is Major, 19 is Minor and 2 is Patch)=> semantic version: semver
--
4. node app.get, app.listen
    --node --watch app.js for automatic restart app.js changes 
    --or npm install nodemon --save-dev: saved in package.json in devDependencies for local development localhost
    --in package.json, script part start: nodemon app.js and run command npm start instead and write any name in place of start eg.ameer, and npm run ameer
-----
5. rest: app.get('/createblog')
    --but resful api : app.get('/blog/create'): more organized route
    --in commonJS,all of the dependencies for a project are stored in one file called node_modules/ 
    --EJS(Embedded JS) mostly used, each dependency is stored in its files and install it as npm i ejs
----------
6. create views folder after setting ejs environment
    --make new home.ejs file for html rendering
    --and make other required file such as blog.ejs, about.ejs
    --<h1>No sum in Html: 10+10</h1>
    --<h1>Dynamic in ejs: <%- 10+10%></h1> <%=%>
    -- pass data from res.render as variable or const
   --and push to git through terminal as: git add., git commit -m 'message' and git push
------------------
7.  created new ejs page like navbar, footer, creteblog, editblog
    --UI part complete
 -----
8. Model, database connection
    --installed zampp, setup phpmyadmin table, database
    --ORM(Object Relational Mapping) eg. user.create()
    --npm install sequelize mysql2 (2 package)
    --created model and config folder for db connection
    --db code in index.js and dbConfig.js
    --require index.js in app.js
-----------
9. app.post() method
    --save post form data to db
    --console.log(req.body) to see data in console, shows undefined
    --app.use(express.urlencoded({extended: true})) //this shows posted data in console instead of undefined: for monolithic and cs architecture
    --app.use(express.json())= understand data if sent or posted and for client server architecture
    --sending blogs data to db using blogs.create operation
    --using await in blogs.create, and write async in app.post to enhance delay or operation that takes time
-----------
10. uploading file in nodejs as it only understand text, not file
    --content-type:application/json(nodejs understands it for text)
    --content-type: multipart/form-data(for file, image, video)
    --use Multer package (newer easier less line code package)
    --busboy was old package used for image, video with more code
    --npm i multer as middleware
    --create new folder named middleware and new file "MulterConfig.js" and reuse it anywehere 
    --create storage folder to store file handled by cb(callback) function
    --use upload.single for single file and upload.array for multiple file
    --//console.log(req.body) //to check in console
    --console.log(req.file) //for single file
    --//console.log(req.files) //for multiple file
    --use enctype="multipart" in <form></form> tag for file(image)
    --file(image) never stays in database, but in server code "/storage", only route of file stays in db
    --aws S3 bucket came for separate storing
    --cloudinary- give 512 mb free
    --digital ocean spaces is premium, give folder to store file
---------
11. 

